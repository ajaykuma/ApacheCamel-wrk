#Application to copy file from one folder to another folder on local filesystem
refer:FileCopyLocalFS.java
-----------------------
#Application to produce(producer) and consume(consumer) on local filesystem.
refer:ProduConsumeLocalFS.java
------------------------------------------------
#Application to produce(producer) > transform(processor) > consume(consumer) on local filesystem.
refer: ProduTransfConsumeLocalFS
------------------------
#Polling for a Dir: 
Here The program will begin to poll your target folder under your current directory
and wait for incoming files. 
Once files pushed in dir, it will start picking up the files and passing them to the next Processor step. 

For example:
public class FileRouteBuilder extends RouteBuilder {
    static Logger LOG = LoggerFactory.getLogger(FileRouteBuilder.class);
    public void configure() {
        from("file://target?delay=1000")
        .process(new Processor() {
            public void process(Exchange msg) {
                File file = msg.getIn().getBody(File.class);
                LOG.info("Processing file: " + file);


By default, the file component will create a org.apache.camel.component.file.GenericFile object 
for each file found and pass it down your Route as message body. 
You may retrieve all your file information through this object. 
Alternatively, we can also use the Exchange API to auto convert the message body object to a type 
you expect to receive (eg: as with msg.getIn().getBody(File.class)). 
In the example above, the File is a type you expect to get from the message body, and Camel will try to 
convert it for you. Camel uses the contextâ€™s registry space to pre-register many TypeConverter's that can 
handle the conversion of most of the common data types (like Java primitives). 
These TypeConverters are a powerful way to make your Route and Processor more flexible and portable.

Camel will not only convert just your File object from a message body, but it can also read the file content. 
If your files are character text based, then we can do this.

       from("file://target/input?charset=UTF-8")
        .process(new Processor() {
            public void process(Exchange msg) {
                String text = msg.getIn().getBody(String.class);
                LOG.info("Processing text: " + text);
            }
        });

Specify that it is a String type, and Camel will read your file and pass in the entire file text content 
as a body message. You may even use the charset to change the encoding.

If we are dealing with a binary file, then simply try byte[] bytes =msg.getIn().getBody(byte[].class); conversion instead. 

refer:PollingDirMainApp.java
      PollingDir.java
---------------------------------------------- 
#Polling & Processing Large Files:
#To ensure proper handling, move files into a staging folder before route starts the processing and when done
move it a .completed folder.

        //to ensure proper handling
        //from("file://input_box?delay=1000&preMove=staging&move=.completed")

refer:PollingDirMainApp.java
      PollingDir.java
-----------------------------------------------
#What if the folder being polled doesn't have the files and files will be generated by some external process.
#This might lead to a situation when route will try to read a file or if incoming file it would read incomplete file.

        //configure file endpoint to only read the polling folder when a signal/read-marker exists
        from("file://input_box?delay=1000&preMove=staging&move=.completed&doneFileName=ReadyFile.txt")

Now files will be polled and then moved, only if the 'ReadyFile.txt' exists
The marker file can just be an empty file, and it will be removed by Camel after polling. 

refer:PollingDirMainApp.java
      PollingDir.java
------------------------
#When processing Large file ,avoid loading a file's entire content into memory for processing
#Split the file into records (eg: per line) and process it one by one ("streaming"). 
#StreamCaching is not in use. If using streams then its recommended to enable stream caching.

                //using splitting and streaming
        //from("file://input_box?delay=1000&preMove=staging&move=.completed").split(body().tokenize("\n")).streaming()

refer:PollingDirMainApp.java
      PollingDir.java

------------------------
#Writing msgs back into file:
#The file component can also be used to write messages into files. 
#We may use dataset components to generate sample messages. 
#Use it and feed to the Route and then send it to the file component so you can see that each message generated
#will be saved into a file.
refer: WriteMsgsLocalFS.java

We will see that 10 files would be generated in the target/output folder with the 
file name in ID-<hostname>-<unique-number>-<msg-seq-num> format.
refer: WriteMsgsLocalFS.java
-----------------------

------------------------
#Reading in the File Content and Converting to Different Types

#Application to convert file contents from xml to json..
refer:XMLToJSONTransf.java
      MyProcessor.java
      Employee.java
